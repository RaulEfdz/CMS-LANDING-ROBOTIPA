CmbmwDqz05Cdzw6z
ðŸ“Œ ConfiguraciÃ³n de Proyecto Supabase con Next.js y GestiÃ³n de Roles
Esta guÃ­a te mostrarÃ¡ cÃ³mo:
âœ… Configurar un proyecto en Supabase.
âœ… Crear una tabla user_profiles con una columna de role.
âœ… Configurar un trigger para gestionar roles al registrar usuarios.
âœ… Clonar un proyecto Next.js y conectarlo a Supabase.

ðŸ”¹ Paso 1: Crear un Proyecto en Supabase
Acceder a Supabase

Abre tu navegador y visita https://supabase.com/.
Registrarse o Iniciar SesiÃ³n

Si tienes una cuenta, inicia sesiÃ³n.
Si no, regÃ­strate gratuitamente.
Crear un Nuevo Proyecto

En el panel de Supabase, haz clic en "New Project".
Completa los siguientes campos:
Nombre del Proyecto: Escribe un nombre para tu proyecto.
ContraseÃ±a de la Base de Datos: Crea una contraseÃ±a segura.
RegiÃ³n: Elige la mÃ¡s cercana a tu ubicaciÃ³n o usuarios.
Plan de Precios: Selecciona "Free".
Haz clic en "Create New Project".
Esperar el Despliegue

Supabase tardarÃ¡ unos minutos en configurar tu proyecto.
Una vez listo, serÃ¡s redirigido automÃ¡ticamente al panel de control.
ðŸ”¹ Paso 2: Configurar la Base de Datos en Supabase
Ir a "Database" â†’ "Table Editor"

Crear una nueva tabla llamada user_profiles

Copiar y pegar este cÃ³digo en el SQL Editor:

sql
Copiar
Editar
CREATE TABLE public.user_profiles (
  user_id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  email_confirmed_at TIMESTAMPTZ,
  first_name TEXT,
  last_name TEXT,
  full_name TEXT NOT NULL,
  profile_picture_url TEXT,
  date_of_birth DATE,
  phone_number TEXT,
  address TEXT,
  city TEXT,
  country TEXT,
  postal_code TEXT,
  timezone TEXT,
  locale TEXT,
  preferred_language TEXT,
  theme_preference TEXT,
  notifications_enabled BOOLEAN DEFAULT TRUE,
  marketing_emails_enabled BOOLEAN DEFAULT TRUE,
  website_url TEXT,
  twitter_username TEXT,
  instagram_username TEXT,
  linkedin_url TEXT,
  github_username TEXT,
  role TEXT DEFAULT 'user',
  is_active BOOLEAN DEFAULT TRUE,
  last_login_at TIMESTAMPTZ,
  bio TEXT,
  interests TEXT[],
  custom_field_1 TEXT,
  custom_field_2 INTEGER,
  custom_field_3 BOOLEAN,
  created_by_user_id UUID REFERENCES auth.users(id),
  updated_by_user_id UUID REFERENCES auth.users(id)
);
Guardar la tabla haciendo clic en "Save".

Verificar en el Table Editor que user_profiles se haya creado correctamente.

ðŸ”¹ Paso 3: Activar Row Level Security (RLS) y Crear PolÃ­ticas
Ir a "Database" â†’ "Table Editor" â†’ user_profiles

Activar Row Level Security (RLS)

En la pestaÃ±a Settings, activa la opciÃ³n "Enable RLS".
Crear polÃ­ticas de seguridad para permitir a los usuarios acceder y editar su propio perfil

ðŸ”¹ Permitir a los usuarios ver su propio perfil

Ir a la pestaÃ±a "Policies" y hacer clic en "Create Policy".
Configurar:
Name: Allow users to view their own profile
Action: SELECT
Policy definition (Using Expression):
sql
Copiar
Editar
auth.uid() = user_id
Roles to apply policy to: Authenticated
ðŸ”¹ Permitir a los usuarios actualizar su propio perfil

Crear otra polÃ­tica con:
Name: Allow users to update their own profile
Action: UPDATE
Policy definition (Using Expression):
sql
Copiar
Editar
auth.uid() = user_id
Roles to apply policy to: Authenticated
ðŸ”¹ Paso 4: Crear FunciÃ³n y Trigger para AutocreaciÃ³n de Perfiles
Ir a "Database" â†’ "Functions" â†’ "+ New Function"

Configurar la funciÃ³n:

Function Name: create_user_profile_on_signup
Schema: public
Return Type: TRIGGER
Language: plpgsql
Definition (copiar y pegar):
sql
Copiar
Editar
BEGIN
  INSERT INTO public.user_profiles (user_id, full_name, email_confirmed_at, role)
  VALUES (NEW.id, NEW.raw_user_meta_data->>'full_name', NOW(), 'user');
  RETURN NEW;
END;
Guardar la funciÃ³n haciendo clic en "Save Function".

ðŸ”¹ Paso 4.2: Crear el Trigger
Ir a "Database" â†’ "SQL Editor"

Ejecutar este cÃ³digo SQL:

sql
Copiar
Editar
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW EXECUTE FUNCTION public.create_user_profile_on_signup();
Hacer clic en "Run" para ejecutar el cÃ³digo.

ðŸ”¹ VerificaciÃ³n:

Crear un usuario en Supabase y verificar que se aÃ±ade automÃ¡ticamente en user_profiles.
ðŸ”¹ Paso 5: Clonar el Proyecto Next.js y Configurar Supabase
Abrir la Terminal y ejecutar:

bash
Copiar
Editar
git clone URL_DEL_REPOSITORIO_GITHUB mi-proyecto-supabase
cd mi-proyecto-supabase
Instalar las dependencias:

bash
Copiar
Editar
npm install
ðŸ”¹ Paso 5.2: Configurar las Variables de Entorno
Crear o abrir el archivo .env.local

AÃ±adir las variables de Supabase:

bash
Copiar
Editar
NEXT_PUBLIC_SUPABASE_URL=TU_URL_DE_PROYECTO_SUPABASE
NEXT_PUBLIC_SUPABASE_ANON_KEY=TU_CLAVE_ANONIMA_PUBLICA_SUPABASE
ðŸ”¹ Paso 5.3: Crear el Cliente de Supabase en Next.js
Crear un archivo en lib/supabaseClient.ts

AÃ±adir el siguiente cÃ³digo:

ts
Copiar
Editar
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL as string;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);
ðŸ”¹ Paso 5.4: Ejecutar y Verificar el Proyecto
Ejecutar Next.js:

bash
Copiar
Editar
npm run dev
Verificar que todo funcione correctamente.

Â¡Listo! ðŸš€ Has configurado Supabase con Next.js de manera segura.
Si necesitas mÃ¡s ajustes o mejoras, dime quÃ© quieres cambiar y te ayudo. ðŸ˜Š












